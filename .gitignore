def loadPackages(truck, hashTable):
    # Create a list of packages that need to be loaded
    packagesToLoad = [item for sublist in hashTable.table for key, item in sublist if item.status == "At hub"]

    # Packages that must go out for delivery on the same truck
    sameTruckPackages = [13, 14, 15, 16, 19, 20]
    # Packages that may only be delivered by truck 2
    truck2OnlyPackages = [3, 18, 36, 38]
    # Packages that cannot leave the hub before 9:05 a.m.
    lateDeparturePackages = [6, 25, 28, 32]

    # Load packages that have specific truck requirements
    if truck.id == 1:
        for id in sameTruckPackages:
            package = hashTable.retrieve(id)
            if package and package in packagesToLoad:
                # Update the status of the package
                package.status = "Loaded"
                truck.packages.append(package)
                packagesToLoad.remove(package)
                truck.lastLoadedPackage = package
    elif truck.id == 2:
        for id in truck2OnlyPackages:
            package = hashTable.retrieve(id)
            if package and package in packagesToLoad:
                # Update the status of the package
                package.status = "Loaded"
                truck.packages.append(package)
                packagesToLoad.remove(package)
                truck.lastLoadedPackage = package


    # Find the package closest to the current location
    while len(truck.packages) < 16 and packagesToLoad:
        closest_package = minDistanceFrom(truck, packagesToLoad)
        # Check constraints for specific packages
        if closest_package.id in truck2OnlyPackages and truck.id != 2:
            continue
        if closest_package.id in sameTruckPackages and truck.id != 1:
            continue
         if closest_package.id in lateDeparturePackages and truck.departureTime < '09:05 AM':
             continue
        closest_package.status = "Loaded"
        truck.packages.append(closest_package)
        packagesToLoad.remove(closest_package)
        truck.lastLoadedPackage = closest_package
        # truck.currentLocation = truck.lastLoadedPackage.address  # Update the truck's current location

    # Return the updated list of packages to load
    return packagesToLoad