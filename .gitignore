def loadPackages(truck, hashTable):
    # Create a list of packages that need to be loaded
    packagesToLoad = [item for sublist in hashTable.table for key, item in sublist if item.status == "At hub"]

    # Packages that must go out for delivery on the same truck
    sameTruckPackages = [13, 14, 15, 16, 19, 20]
    # Packages that may only be delivered by truck 2
    truck2OnlyPackages = [3, 18, 36, 38]
    # Packages that cannot leave the hub before 9:05 a.m.
    lateDeparturePackages = [6, 25, 28, 32]

    # Load packages that have specific truck requirements
    if truck.id == 1:
        for id in sameTruckPackages:
            package = hashTable.retrieve(id)
            if package and package in packagesToLoad:
                # Update the status of the package
                package.status = "Loaded"
                truck.packages.append(package)
                packagesToLoad.remove(package)
                truck.lastLoadedPackage = package
    elif truck.id == 2:
        for id in truck2OnlyPackages:
            package = hashTable.retrieve(id)
            if package and package in packagesToLoad:
                # Update the status of the package
                package.status = "Loaded"
                truck.packages.append(package)
                packagesToLoad.remove(package)
                truck.lastLoadedPackage = package


    # Find the package closest to the current location
    while len(truck.packages) < 16 and packagesToLoad:
        closest_package = minDistanceFrom(truck, packagesToLoad)
        # Check constraints for specific packages
        if closest_package.id in truck2OnlyPackages and truck.id != 2:
            continue
        if closest_package.id in sameTruckPackages and truck.id != 1:
            continue
         if closest_package.id in lateDeparturePackages and truck.departureTime < '09:05 AM':
             continue
        closest_package.status = "Loaded"
        truck.packages.append(closest_package)
        packagesToLoad.remove(closest_package)
        truck.lastLoadedPackage = closest_package
        # truck.currentLocation = truck.lastLoadedPackage.address  # Update the truck's current location

    # Return the updated list of packages to load
    return packagesToLoad

******************************************
def truckDeliverPackages(truck, hashTable):
    # Create a list of delivered packages
    delivered_packages = []

    # Convert the truck's departure time to a datetime object
    departure_time = datetime.datetime.strptime(truck.departureTime, "%H:%M %p")

    # While there are packages in the truck
    while truck.packages:
        # Find the package that is closest to the current location of the truck
        closest_package = minDistanceFrom(truck, truck.packages)

        # Calculate the distance to the delivery address
        distance = distanceBetween(truck.currentLocation, closest_package.address)

        # Calculate the time it will take to deliver the package
        delivery_time = departure_time + datetime.timedelta(hours=distance / truck.speed)

        # Deliver the package
        print(f"Delivering package {closest_package.id} to {closest_package.address}")

        # Update the truck's current location
        truck.currentLocation = closest_package.address

        # Update the package's status
        closest_package.status = "Delivered"
        print(f"Package {closest_package.id} has been delivered.")

        # Record the time the package was delivered
        closest_package.deliveryTime = delivery_time.strftime("%H:%M:%S")
        print(f"Package {closest_package.id} was delivered at {closest_package.deliveryTime}")

        # Update the package in the hash table
        hashTable.insert(closest_package.id, closest_package)

        # Add the package to the list of delivered packages
        delivered_packages.append(closest_package)

        # Remove the package from the truck's list of packages
        truck.packages.remove(closest_package)

        # Update the truck's departure time to the delivery time
        departure_time = delivery_time

        # Update the total mileage for the truck
        truck.totalMileage += distance
        print(f"Total mileage for truck {truck.id} is now {truck.totalMileage} miles")

    # Return the list of delivered packages
    return delivered_packages


*****************************************

from PackageDelvery.src.distance import minDistanceFrom, distanceBetween
import datetime


def manageTrucks(truck1, truck2, truck3, hashTable):
    # Convert the truck's departure time to a datetime object
    departure_time1 = datetime.datetime.strptime(truck1.departureTime, "%H:%M %p")
    departure_time2 = datetime.datetime.strptime(truck2.departureTime, "%H:%M %p")

    # Deliver packages for Truck 1 and Truck 2
    print("Starting deliveries for Truck 1...")
    delivered_packages1 = truckDeliverPackages(truck1, hashTable)
    print("Starting deliveries for Truck 2...")
    delivered_packages2 = truckDeliverPackages(truck2, hashTable)

    # Get the delivery time of the last package delivered by each truck
    last_delivery_time1 = datetime.datetime.strptime(delivered_packages1[-1].deliveryTime, "%H:%M:%S")
    last_delivery_time2 = datetime.datetime.strptime(delivered_packages2[-1].deliveryTime, "%H:%M:%S")

    # Determine the time when Truck 3 can start delivering packages
    truck3_start_time = max(last_delivery_time1, last_delivery_time2)
    if truck3_start_time < datetime.datetime.strptime("09:05", "%H:%M"):
        truck3_start_time = datetime.datetime.strptime("09:05", "%H:%M")

    # Set the departure time for Truck 3
    truck3.departureTime = truck3_start_time.strftime("%H:%M %p")

    # Deliver packages for Truck 3
    print(f"Starting deliveries for Truck 3 at {truck3.departureTime}...")
    delivered_packages3 = truckDeliverPackages(truck3, hashTable)

    # Return the list of all delivered packages
    print("All deliveries completed.")
    return delivered_packages1 + delivered_packages2 + delivered_packages3


def truckDeliverPackages(truck, hashTable):
    # Create a list of delivered packages
    delivered_packages = []

    # Convert the truck's departure time to a datetime object
    departure_time = datetime.datetime.strptime(truck.departureTime, "%H:%M %p")

    # Packages that need to be delivered early
    earlyDeliveryPackages = [1, 6, 13, 14, 16, 20, 25, 29, 30, 31, 34, 37, 40]
    veryEarlyDeliveryPackages = [15]

    # Create a list of early delivery packages in the truck
    early_packages = [p for p in truck.packages if str(p.id) in map(str, veryEarlyDeliveryPackages + earlyDeliveryPackages)]
    early_package_ids = [p.id for p in early_packages]
    print(f"Early package IDs: {early_package_ids}")

    # While there are early delivery packages in the truck
    while early_packages:
        # Find the package that is closest to the current location of the truck
        closest_package = minDistanceFrom(truck, early_packages)
        deliverPackage(closest_package, truck, hashTable, delivered_packages, departure_time)
        early_packages.remove(closest_package)

    # While there are packages in the truck
    while truck.packages:
        # Find the package that is closest to the current location of the truck
        closest_package = minDistanceFrom(truck, truck.packages)
        print(f"other packages:{closest_package.id}")
        deliverPackage(closest_package, truck, hashTable, delivered_packages, departure_time)

    # Return the list of delivered packages
    return delivered_packages


def deliverPackage(package, truck, hashTable, delivered_packages, departure_time):
    # Calculate the distance to the delivery address
    distance = distanceBetween(truck.currentLocation, package.address)

    # Calculate the time it will take to deliver the package
    delivery_time = departure_time + datetime.timedelta(hours=distance / truck.speed)

    # Deliver the package
    print(f"Delivering package {package.id} to {package.address}")

    # Update the truck's current location
    truck.currentLocation = package.address

    # Update the package's status
    package.status = "Delivered"
    print(f"Package {package.id} has been delivered.")

    # Record the time the package was delivered
    package.deliveryTime = delivery_time.strftime("%H:%M:%S")
    print(f"Package {package.id} was delivered at {package.deliveryTime}")

    # Update the package in the hash table
    hashTable.insert(package.id, package)

    # Add the package to the list of delivered packages
    delivered_packages.append(package)

    # Remove the package from the truck's list of packages
    truck.packages.remove(package)

    # Update the truck's departure time to the delivery time
    departure_time = delivery_time

    # Update the total mileage for the truck
    truck.totalMileage += distance
    print(f"Total mileage for truck {truck.id} is now {truck.totalMileage} miles")